home-path = "/Users/haimjoon/IdeaProjects/cinamon"
conf-path = ${home-path}/conf
data-path = ${home-path}/data

api {
    service {
        http {
            host = "localhost"
            port = "8080"
        }
    }
}

kafka {
    zookeeper {
        servers = ["localhost:2181"]
    }

    broker {
        servers = ["localhost:9092"]
        jmx.port = 8084
    }

    schema {
        server = "http://localhost:8081"
    }

    ingester {
        servers = ["http://localhost:8083"]
        connector {
            class = "io.confluent.connect.hdfs.HdfsSinkConnector"
            hdfs.url = "hdfs://hdhhcc"
            hive.integration = "true"
            hadoop.conf.dir = "/prod/kafka-ingester/conf"
            logs.dir = "/product/logs"
            hive.metastore.uris = "thrift =//dhdname01.hyundaicard.com =9083 =thrift =//dhdname02.hyundaicard.com =9083"
            schema.compatibility = "BACKWARD"
            partitioner.class = "io.confluent.connect.hdfs.partitioner.ExtPartitioner"
            locale = "en"
            timezone = "Asia/Seoul"
        }
    }
}

akka {
    #loggers = ["akka.event.slf4j.Slf4jLogger"]
    #logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
    loglevel = "DEBUG"
    #stdout-loglevel = "INFO"

    #message {
    #    timeout = 60000
    #}

    extensions = ["com.romix.akka.serialization.kryo.KryoSerializationExtension$"]

    actor {
        provider = "akka.cluster.ClusterActorRefProvider"
        #default-dispatcher {
        # Throughput for default Dispatcher, set to 1 for as fair as possible
        #throughput = 10
        #}

        # Protobuf serializer for cluster messages
        #serializers {
        #	akka-cluster = "akka.cluster.protobuf.ClusterMessageSerializer"
        #}
        #serialization-bindings {
        #	"akka.cluster.ClusterMessage" = akka-cluster
        #}
        #serialization-identifiers {
        #	"akka.cluster.protobuf.ClusterMessageSerializer" = 5
        #}
        #router.type-mapping {
        #	adaptive-pool = "akka.cluster.routing.AdaptiveLoadBalancingPool"
        #	adaptive-group = "akka.cluster.routing.AdaptiveLoadBalancingGroup"
        #}

        deployment {
            #default {
            # MetricsSelector to use
            # - available: "mix", "heap", "cpu", "load"
            # - or: Fully qualified class id of the MetricsSelector class.
            # The class must extend akka.cluster.routing.MetricsSelector
            # and have a public constructor with com.typesafe.config.Config
            # parameter.
            # - default is "mix"
            #metrics-selector = mix

            #cluster {
            # enable cluster aware router that deploys to nodes in the cluster
            #enabled = off

            # Maximum number of routees that will be deployed on each cluster
            # member node.
            # Note that max-total-nr-of-instances defines total number of routees, but
            # number of routees per node will not be exceeded, i.e. if you
            # define max-total-nr-of-instances = 50 and max-nr-of-instances-per-node = 2
            # it will deploy 2 routees per new member in the cluster, up to
            # 25 members.
            #max-nr-of-instances-per-node = 1

            # Maximum number of routees that will be deployed, in total
            # on all nodes. See also description of max-nr-of-instances-per-node.
            # For backwards compatibility reasons, nr-of-instances
            # has the same purpose as max-total-nr-of-instances for cluster
            # aware routers and nr-of-instances (if defined by user) takes
            # precedence over max-total-nr-of-instances.
            #max-total-nr-of-instances = 10000

            # Defines if routees are allowed to be located on the same node as
            # the head router actor, or only on remote nodes.
            # Useful for master-worker scenario where all routees are remote.
            #allow-local-routees = on

            # Use members with specified role, or all members if undefined or empty.
            #use-role = "cinamon"
            #}
            #}

            /cinamonMaster/singleton/shoverManagerRouter {
                router = smallest-mailbox-pool
                nr-of-instances = 100
                cluster {
                    enabled = on
                    routees.paths = ["/user/shoverManager"]
                    allow-local-routees = on
                    max-nr-of-instances-per-node = 3
                    user-role = "cinamon"
                }
            }

            /cinamonMaster/singleton/schemaManagerRouter {
                router = smallest-mailbox-pool
                nr-of-instances = 100
                cluster {
                    enabled = on
                    routees.paths = ["/user/schemaManager"]
                    allow-local-routees = on
                    max-nr-of-instances-per-node = 3
                    user-role = "cinamon"
                }
            }

            /cinamonMaster/singleton/brokerManagerRouter {
                router = smallest-mailbox-pool
                nr-of-instances = 100
                cluster {
                    enabled = on
                    routees.paths = ["/user/brokerManager"]
                    allow-local-routees = on
                    max-nr-of-instances-per-node = 3
                    user-role = "cinamon"
                }
            }

            /cinamonMaster/singleton/ingesterManagerRouter {
                router = smallest-mailbox-pool
                nr-of-instances = 100
                cluster {
                    enabled = on
                    routees.paths = ["/user/ingesterManager"]
                    allow-local-routees = on
                    max-nr-of-instances-per-node = 3
                    user-role = "cinamon"
                }
            }

        }

        serializers {
            java = "akka.serialization.JavaSerializer"
            kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
            proto = "akka.remote.serialization.ProtobufSerializer"
        }

        serialization-bindings {
            #"com.hcard.cinamon.message.Message" = kryo
            #"com.hcard.cinamon.config.MasterConfig" = proto
            #"com.google.protobuf.Message" = proto
        }

        kryo  {
            # Possibles values for type are: graph or nograph
            # graph supports serialization of object graphs with shared nodes
            # and cyclic references, but this comes at the expense of a small
            # overhead nograph does not support object grpahs with shared nodes,
            # but is usually faster
            type = "graph"

            # Possible values for idstrategy are:
            # default, explicit, incremental, automatic
            #
            # default - slowest and produces bigger serialized representation.
            # Contains fully-qualified class names (FQCNs) for each class. Note
            # that selecting this strategy does not work in version 0.3.2, but
            # is available from 0.3.3 onward.
            #
            # explicit - fast and produces compact serialized representation.
            # Requires that all classes that will be serialized are pre-registered
            # using the "mappings" and "classes" sections. To guarantee that both
            # sender and receiver use the same numeric ids for the same classes it
            # is advised to provide exactly the same entries in the "mappings"
            # section.
            #
            # incremental - fast and produces compact serialized representation.
            # Support optional pre-registering of classes using the "mappings"
            # and "classes" sections. If class is not pre-registered, it will be
            # registered dynamically by picking a next available id To guarantee
            # that both sender and receiver use the same numeric ids for the same
            # classes it is advised to pre-register them using at least the "classes" section.
            #
            # automatic -  use the pre-registered classes with fallback to FQCNs
            # Contains fully-qualified class names (FQCNs) for each non pre-registered
            # class in the "mappings" and "classes" sections. This strategy was
            # added in version 0.4.1 and will not work with the previous versions

            idstrategy = "incremental"

            # Define a default queue builder, by default ConcurrentLinkedQueue is used.
            # Create your own queue builder by implementing the trait QueueBuilder,
            # useful for paranoid GC users that want to use JCtools MpmcArrayQueue for example.
            #
            # If you pass a bounded queue make sure its capacity is equal or greater than the
            # maximum concurrent remote dispatcher threads your application will ever have
            # running; failing to do this will have a negative performance impact:
            #
            # custom-queue-builder = "a.b.c.KryoQueueBuilder"

            # Define a default size for byte buffers used during serialization
            buffer-size = 4096

            # The serialization byte buffers are doubled as needed until they
            # exceed max-buffer-size and an exception is thrown. Can be -1
            # for no maximum.
            max-buffer-size = -1

            # If set, akka uses manifests to put a class id
            # of the top-level object into each message
            use-manifests = false

            # If set it will use the UnsafeInput and UnsafeOutput
            # Kyro IO instances. Please note that there is no guarantee
            # for backward/forward compatibility of unsafe serialization.
            # It is also not compatible with the safe-serialized values.
            # The unsafe IO usually creates bugger payloads but is faster
            # for some types, e.g. native arrays.
            use-unsafe = false

            # The transformations that have be done while serialization
            # Supported transformations: compression and encryption
            # accepted values(comma separated if multiple): off | lz4 | deflate | aes
            # Transformations occur in the order they are specified
            post-serialization-transformations = "lz4,aes"

            # Settings for aes encryption, if included in transformations AES
            # algo mode, key and custom key class can be specified AES algo mode
            # defaults to 'AES/CBC/PKCS5Padding' and key to 'ThisIsASecretKey'.
            # If custom key class is provided, Kryo will use the class specified
            # by a fully qualified class id to get custom AES key. Such a
            # class should define the method 'kryoAESKey'. This key overrides 'key'.
            # If class doesn't contain 'kryoAESKey' method, specified key is used.
            # If this is not present, default key is used
            #encryption {
            #    aes {
            #        mode = "AES/CBC/PKCS5Padding"
            #        key = j68KkRjq21ykRGAQ
            #        IV-length = 16
            #        custom-key-class = "CustomAESKeyClass"
            #    }
            #}

            # Log implicitly registered classes. Useful, if you want to know all
            # classes which are serialized. You can then use this information in
            # the mappings and/or classes sections
            implicit-registration-logging = false

            # If enabled, Kryo logs a lot of information about serialization process.
            # Useful for debugging and lowl-level tweaking
            kryo-trace = false

            # If proviced, Kryo uses the class specified by a fully qualified
            # class id to perform a custom initialization of Kryo instances in
            # addition to what is done automatically based on the config file.
            #kryo-custom-serializer-init = "CustomKryoSerializerInitFQCN"

            # If enabled, allows Kryo to resolve subclasses of registered Types.
            #
            # This is primarily useful when idstrategy is set to "explicit". In this
            # case, all classes to be serialized must be explicitly registered. The
            # problem is that a large number of common Scala and Akka types (such as
            # Map and ActorRef) are actually traits that mask a large number of
            # specialized classes that deal with various situations and optimizations.
            # It isn't straightforward to register all of these, so you can instead
            # register a single supertype, with a serializer that can handle *all* of
            # the subclasses, and the subclasses get serialized with that.
            #
            # Use this with care: you should only rely on this when you are confident
            # that the superclass serializer covers all of the special cases properly.
            resolve-subclasses = false

            # Define mappings from a fully qualified class id to a numeric id.
            # Smaller ids lead to smaller sizes of serialized representations.
            #
            # This section is:
            # - mandatory for idstrategy="explicit"
            # - ignored   for idstrategy="default"
            # - optional  for incremental and automatic
            #
            # The smallest possible id should start at 20 (or even higher), because
            # ids below it are used by Kryo internally e.g. for built-in Java and
            # Scala types
            #mappings {
            #    "package1.name1.className1" = 20,
            #    "package2.name2.className2" = 21
            #}

            # Define a set of fully qualified class names for
            # classes to be used for serialization.
            # The ids for those classes will be assigned automatically,
            # but respecting the order of declaration in this section
            #
            # This section is ignored for idstrategy="default" and optional for
            # all other.
            #classes = [
            #    "package3.name3.className3",
            #    "package4.name4.className4"
            #]
        }

    }

    remote {
        log-remote-lifecycle-events = off

        enabled-transports = ["akka.remote.netty.tcp"]
        netty.tcp.hostname = "127.0.0.1"
        netty.tcp.port = 8139
        netty.tcp.maximum-frame-size = 1024k
    }

    cluster {
        name = "cinamonCluster"

        # Initial contact points of the cluster.
        # The nodes to join automatically at startup.
        # Comma separated full URIs defined by a string on the form of
        # "akka.tcp://system@hostname:port"
        # Leave as empty if the node is supposed to be joined manually.
        seed-nodes = ["akka.tcp://"${akka.cluster.name}"@"${akka.remote.netty.tcp.hostname}":"${akka.remote.netty.tcp.port}]

        # how long to wait for one of the seed nodes to reply to initial join request
        #seed-node-timeout = 5s

        # Should the 'leader' in the cluster be allowed to automatically mark
        # unreachable nodes as DOWN after a configured time of unreachability?
        # Using auto-down implies that two separate clusters will automatically be
        # formed in case of network partition.
        #
        # Don't enable this in production, see 'Auto-downing (DO NOT USE)' section
        # of Akka Cluster documentation.
        #
        # Disable with "off" or specify a duration to enable auto-down.
        # If a downing-provider-class is configured this setting is ignored.
        #retry-unsuccessful-join-after = 10s

        # Time margin after which shards or singletons that belonged to a downed/removed
        # partition are created in surviving partition. The purpose of this margin is that
        # in case of a network partition the persistent actors in the non-surviving partitions
        # must be stopped before corresponding persistent actors are started somewhere else.
        # This is useful if you implement downing strategies that handle network partitions,
        # e.g. by keeping the larger side of the partition and shutting down the smaller side.
        # It will not add any extra safety for auto-down-unreachable-after, since that is not
        # handling network partitions.
        # Disable with "off" or specify a duration to enable.
        #down-removal-margin = off

        # Pluggable support for downing of nodes in the cluster.
        # If this setting is left empty behaviour will depend on 'auto-down-unreachable' in the following ways:
        # * if it is 'off' the `NoDowning` provider is used and no automatic downing will be performed
        # * if it is set to a duration the `AutoDowning` provider is with the configured downing duration
        #
        # If specified the value must be the fully qualified class id of a subclass of
        # `akka.cluster.DowningProvider` having a public one argument constructor accepting an `ActorSystem`
        #downing-provider-class = ""

        # Artery only setting
        # When a node has been gracefully removed, let this time pass (to allow for example
        # cluster singleton handover to complete) and then quarantine the removed node.
        #quarantine-removed-node-after=30s

        # By default, the leader will not move 'Joining' members to 'Up' during a network
        # split. This feature allows the leader to accept 'Joining' members to be 'WeaklyUp'
        # so they become part of the cluster even during a network split. The leader will
        # move 'WeaklyUp' members to 'Up' status once convergence has been reached. This
        # feature must be off if some members are running Akka 2.3.X.
        # WeaklyUp is an EXPERIMENTAL feature.
        #allow-weakly-up-members = off

        # The roles of this member. List of strings, e.g. roles = ["A", "B"].
        # The roles are part of the membership information and can be used by
        # routers or other services to distribute work to certain member types,
        # e.g. front-end and back-end nodes.
        roles = ["cinamon"]

        #role {
        # Minimum required number of members of a certain role before the leader
        # changes member status of 'Joining' members to 'Up'. Typically used together
        # with 'Cluster.registerOnMemberUp' to defer some action, such as starting
        # actors, until the cluster has reached a certain size.
        # E.g. to require 2 nodes with role 'frontend' and 3 nodes with role 'backend ':
        # frontend.min-nr-of-members = 2
        # backend.min-nr-of-members = 3
        #<role-id>.min-nr-of-members = 1
        #}

        # Minimum required number of members before the leader changes member status
        # of 'Joining' members to 'Up'. Typically used together with
        # 'Cluster.registerOnMemberUp' to defer some action, such as starting actors,
        # until the cluster has reached a certain size.
        #min-nr-of-members = 1

        # Enable/disable info level logging of cluster events
        #log-info = on

        # Enable or disable JMX MBeans for management of the cluster
        #jmx.enabled = off

        # how long should the node wait before starting the periodic tasks
        # maintenance tasks?
        #periodic-tasks-initial-delay = 1s

        # how often should the node send out gossip information?
        #gossip-interval = 10s

        # discard incoming gossip messages if not handled within this duration
        #gossip-time-to-live = 2s

        # how often should the leader perform maintenance tasks?
        #leader-actions-interval = 1s

        # how often should the node move nodes, marked as unreachable by the failure
        # detector, out of the membership ring?
        #unreachable-nodes-reaper-interval = 10s

        # How often the current internal stats should be published.
        # A value of 0s can be used to always publish the stats, when it happens.
        # Disable with "off".
        #publish-stats-interval = off

        # The id of the dispatcher to use for cluster actors. If not specified
        # default dispatcher is used.
        # If specified you need to define the settings of the actual dispatcher.
        #use-dispatcher = ""

        # Gossip to random node with newer or older state information, if any with
        # this probability. Otherwise Gossip to any random live node.
        # Probability value is between 0.0 and 1.0. 0.0 means never, 1.0 means always.
        #gossip-different-view-probability = 0.8

        # Reduced the above probability when the number of nodes in the cluster
        # greater than this value.
        #reduce-gossip-different-view-probability = 400

        # Settings for the Phi accrual failure detector (http://www.jaist.ac.jp/~ defago/files/pdf/IS_RR_2004_010.pdf
        # [Hayashibara et al]) used by the cluster subsystem to detect unreachable members.
        # The default PhiAccrualFailureDetector will trigger if there are no heartbeats within
        # the duration heartbeat-interval + acceptable-heartbeat-pause + threshold_adjustment,
        # i.e. around 5.5 seconds with default settings.
        #failure-detector {
        # FQCN of the failure detector implementation.
        # It must implement akka.remote.FailureDetector and have
        # a public constructor with a com.typesafe.config.Config and
        # akka.actor.EventStream parameter.
        #implementation-class = "akka.remote.PhiAccrualFailureDetector"

        # How often keep-alive heartbeat messages should be sent to each connection.
        #heartbeat-interval = 10s

        # Defines the failure detector threshold.
        # A low threshold is prone to generate many wrong suspicions but ensures
        # a quick detection in the event of a real crash. Conversely, a high
        # threshold generates fewer mistakes but needs more time to detect
        # actual crashes.
        #threshold = 8.0

        # Number of the samples of inter-heartbeat arrival times to adaptively
        # calculate the failure timeout for connections.
        #max-sample-size = 1000

        # Minimum standard deviation to use for the normal distribution in
        # AccrualFailureDetector. Too low standard deviation might result in
        # too much sensitivity for sudden, but normal, deviations in heartbeat
        # inter arrival times.
        #min-std-deviation = 100ms

        # Number of potentially lost/delayed heartbeats that will be
        # accepted before considering it to be an anomaly.
        # This margin is important to be able to survive sudden, occasional,
        # pauses in heartbeat arrivals, due to for example garbage collect or
        # network drop.
        #acceptable-heartbeat-pause = 3s

        # Number of member nodes that each member will send heartbeat messages to,
        # i.e. each node will be monitored by this number of other nodes.
        #monitored-by-nr-of-members = 5

        # After the heartbeat request has been sent the first failure detection
        # will start after this period, even though no heartbeat message has
        # been received.
        #expected-response-after = 1s
        #}

        #metrics {
        # Enable or disable metrics collector for load-balancing nodes.
        #enabled = on

        # FQCN of the metrics collector implementation.
        # It must implement akka.cluster.MetricsCollector and
        # have public constructor with akka.actor.ActorSystem parameter.
        # The default SigarMetricsCollector uses JMX and Hyperic SIGAR, if SIGAR
        # is on the classpath, otherwise only JMX.
        #collector-class = "akka.cluster.SigarMetricsCollector"

        # How often metrics are sampled on a node.
        # Shorter interval will collect the metrics more often.
        #collect-interval = 3s

        # How often a node publishes metrics information.
        #gossip-interval = 3s

        # How quickly the exponential weighting of past data is decayed compared to
        # new data. Set lower to increase the bias toward newer values.
        # The relevance of each data sample is halved for every passing half-life
        # duration, i.e. after 4 times the half-life, a data sample’s relevance is
        # reduced to 6% of its original relevance. The initial relevance of a data
        # sample is given by 1 - 0.5 ^ (collect-interval / half-life).
        # See http://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average
        #moving-average-half-life = 12s
        #}
        # If the tick-duration of the default scheduler is longer than the
        # tick-duration configured here a dedicated scheduler will be used for
        # periodic tasks of the cluster, otherwise the default scheduler is used.
        # See akka.scheduler settings for more details.
        #scheduler {
        #tick-duration = 33ms
        #ticks-per-wheel = 512
        #}

        #debug {
        # log heartbeat events (very verbose, useful mostly when debugging heartbeating issues)
        #verbose-heartbeat-logging = off
        #}

        #auto-down-unreachable-after = 1m
    }

}


